# https://taskfile.dev

version: '3'

vars:
  CWD:
    sh: git rev-parse --show-toplevel
  APP:
    sh: basename $PWD
  PKG:
    github.com/bzimmer/{{.APP}}
  DIST:
    "{{.CWD}}/dist"
  TASK:
    "{{.CWD}}/.task"
  GO_PACKAGES:
    sh: go list ./...
  VERSION:
    sh: git rev-parse --short HEAD
  LDFLAGS:
    -ldflags "-X {{.PKG}}/pkg.BuildVersion={{.VERSION}} -X {{.PKG}}/pkg.BuildTime="{{now | date "2006-01-02T15:04:05Z07:00"}}""

tasks:
  default:
    cmds:
      - task: build

  generate:
    cmds:
      - go generate -x ./...

  build:
    desc: Build all cmds
    deps: [build-gravl, build-qp]

  build-gravl:
    desc: Build gravl
    deps: []
    sources:
      - '**/*.go'
    cmds:
      - GO111MODULE=on go build {{.LDFLAGS}} -o {{.DIST}}/gravl cmd/gravl/*.go

  build-qp:
    desc: Build qp
    deps: []
    sources:
      - '**/*.go'
    cmds:
      - GO111MODULE=on go build {{.LDFLAGS}} -o {{.DIST}}/qp cmd/qp/*.go

  install:
    desc: Install {{.APP}}
    deps: [test]
    cmds:
      - task: build
        vars:
          DIST:
            sh: echo $GOPATH/bin

  lint:
    desc: Runs golint
    cmds:
      - golint {{catLines .GO_PACKAGES}}
      - golangci-lint -v run

  sec:
    desc: Run security checks
    cmds:
      - gosec ./...

  vet:
    desc: Runs golint
    cmds:
      - go vet {{catLines .GO_PACKAGES}}

  test-integration:
    desc: Run all integration tests
    deps: [build-gravl]
    cmds:
      - go test -count=1 -run Integration {{catLines .GO_PACKAGES}}

  test:
    desc: Run all unit tests
    deps: []
    cmds:
      - mkdir -p {{.DIST}}
      - go test -count=1 -short -covermode count -coverprofile {{.DIST}}/coverage.txt {{catLines .GO_PACKAGES}}

  test-all:
    desc: Run all unit & integration tests
    deps: [test, test-integration]

  cover:
    desc: Visualize test coverage
    deps: [test]
    cmds:
      - go tool cover -html={{.DIST}}/coverage.txt

  clean:
    desc: Remove build artifacts
    cmds:
      - rm -rf {{.DIST}} {{.TASK}}

  download:
    desc: Download dependencies
    cmds:
      - go mod download

  tidy:
    desc: Clean up dependencies
    cmds:
      - go mod tidy

  install-tools:
    # https://marcofranssen.nl/manage-go-tools-via-go-modules/
    desc: Install build tools for {{.APP}}
    deps: [download]
    vars:
      TOOLS:
        # the braces need to be escaped or they are interpreted by Taskfile
        sh: go list -f '{{"{{range .Imports}}{{.}} {{end}}"}}' cmd/tools/tools.go
    cmds:
      - go install {{.TOOLS}}
      - task: tidy

  tools-install:
    deps: [install-tools]

  units:
    desc: Display all struct fields with units
    cmds:
      - go run {{.CWD}}/cmd/genunits/* {{.CWD}}/pkg | jq .

  manual:
    desc: Generate usage documentation
    deps: [build]
    cmds:
      - dist/gravl manual --commands > docs/commands.md
      - dist/gravl manual --analyzers > docs/analyzers.md

  manual-serve:
    desc: Serve the manual content locally
    deps: [manual]
    cmds:
      - grip
