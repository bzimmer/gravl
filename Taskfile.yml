# https://taskfile.dev

version: '3'

dotenv: [".clean.env"]

vars:
  CWD:
    sh: git rev-parse --show-toplevel
  APP:
    sh: basename $PWD
  PKG:
    github.com/bzimmer/gravl/version
  DIST:
    "{{.CWD}}/dist"
  TASK:
    "{{.CWD}}/.task"
  GO_PACKAGES:
    sh: go list ./...
  VERSION:
    sh: git rev-parse --short HEAD
  LDFLAGS:
    -ldflags "-X {{.PKG}}.BuildVersion={{.VERSION}} -X {{.PKG}}.BuildTime={{now | date "2006-01-02T15:04:05Z07:00"}}"

tasks:
  default:
    cmds:
      - task: build

  generate:
    cmds:
      - go generate -x ./...

  build:
    desc: Build all cmds
    deps: [dist]
    cmds:
      - go build {{.CLI_ARGS}} {{.LDFLAGS}} -o {{.DIST}}/gravl cmd/gravl/*.go

  install:
    desc: Install binary
    deps: [snapshot]
    cmds:
      - cp {{.DIST}}/{{.APP}}_{{OS}}_{{ARCH}}/{{.APP}} $GOPATH/bin

  lint:
    desc: Runs lint
    cmds:
      - golangci-lint -v run

  dist:
    cmds:
      - mkdir -p {{.DIST}}

  test:
    desc: Run tests
    deps: [dist]
    cmds:
      - go test {{.CLI_ARGS}} -race -count=1 -covermode atomic -coverprofile {{.DIST}}/coverage.txt ./...

  cover:
    desc: Visualize test coverage
    deps: [test]
    cmds:
      - go tool cover -html={{.DIST}}/coverage.txt

  clean:
    desc: Remove build artifacts
    cmds:
      - rm -rf {{.DIST}} {{.TASK}}

  manual:
    desc: Generate the user manual
    deps: [build]
    cmds:
      - dist/{{.APP}} manual docs/commands > docs/manual.md

  snapshot:
    desc: Build a snapshot
    deps: [test, lint]
    cmds:
      - goreleaser --debug release --snapshot --rm-dist

  tidy:
    desc: Run go mod tidy
    cmds:
      - go mod tidy

  codecov:
    desc: Validate codecov configuration
    cmds:
      - curl --data-binary @.codecov.yml https://codecov.io/validate

  goimports:
    desc: Run goimports
    vars:
      Module:
        sh: go mod edit -json | jq -r .Module.Path
    cmds:
      - goimports -w -local "{{.Module}}" .
