//+build ignore

package main

import (
	"bytes"
	"context"
	"encoding/hex"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"text/template"

	"github.com/urfave/cli/v2"
)

var tmpl = template.Must(template.New("").
	Funcs(map[string]interface{}{"tohex": tohex}).
	Parse(`package manual

// Code generated by go generate; DO NOT EDIT.

var usages = map[string]string{
	{{- range $name, $file := . }}
	"{{ $name }}": "{{ tohex $file }}",
	{{- end }}
}`))

func tohex(s []byte) string {
	return hex.EncodeToString(s)
}

func usage(c *cli.Context) error {
	if c.NArg() != 1 {
		log.Fatal("expected the usage directory as an argument")
	}
	usages := c.Args().Get(0)
	if _, err := os.Stat(usages); os.IsNotExist(err) {
		log.Fatal("documentation directory does not exist")
	}
	files := make(map[string][]byte)
	err := filepath.Walk(usages, func(path string, info os.FileInfo, err error) error {
		if info.IsDir() {
			return nil
		}
		log.Println("adding path:", path)
		b, err := ioutil.ReadFile(path)
		if err != nil {
			log.Printf("error reading %s: %s", path, err)
			return err
		}
		base := filepath.Base(path)
		files[base[:len(base)-3]] = b
		return nil
	})
	if err != nil {
		log.Fatal("error walking usage directory", err)
	}
	builder := &bytes.Buffer{}
	if err = tmpl.Execute(builder, files); err != nil {
		log.Fatal("error executing template", err)
	}
	var data []byte
	data, err = format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("error formatting generated code", err)
	}
	fmt.Fprint(os.Stdout, string(data))
	return nil
}

func main() {
	app := &cli.App{Name: "genusage", Action: usage}
	ctx := context.Background()
	if err := app.RunContext(ctx, os.Args); err != nil {
		log.Fatal("error running genusage", err)
		os.Exit(1)
	}
	os.Exit(0)
}
