// +build ignore

package main

import (
	"bytes"
	"encoding/json"
	"go/format"
	"html/template"
	"io/ioutil"
	"net/http"
	"os"
	"regexp"
	"sort"
	"strings"
	"time"

	"github.com/bzimmer/httpwares"
	"github.com/gocolly/colly/v2"
	"github.com/rs/zerolog/log"
)

const (
	local   = true
	baseURL = "https://www.wta.org/go-outside/trip-reports"
	q       = `// Code generated by "genregions.go"; DO NOT EDIT.

	package wta

	// The list of regions on which WTA trips are reported
	var regions = []*Region{
		{{- range .}}
		&Region{ID: "{{.ID}}", Name: "{{.Name}}",
			SubRegions: []*Region{
				{{- range .SubRegions}}
				&Region{ID: "{{.ID}}", Name: "{{.Name}}"},
				{{- end}}
			},
		},
		{{- end}}
	}`
)

type Region struct {
	ID         string
	Name       string
	SubRegions []Region
}

type RegionScraper struct {
	Regions    []Region
	SubRegions map[string]map[string]string
}

func (r *RegionScraper) SuperRegion(e *colly.HTMLElement) {
	e.ForEach("option", func(index int, elem *colly.HTMLElement) {
		if index == 0 {
			return
		}
		r.Regions = append(r.Regions, Region{
			ID:   strings.TrimSpace(elem.Attr("value")),
			Name: strings.TrimSpace(elem.Text),
		})
	})
}

func (r *RegionScraper) SubRegion(e *colly.HTMLElement) {
	x := regexp.MustCompile(`var subregion_options\s+=\s+(?P<SubRegion>.*);`)
	if m := x.FindStringSubmatch(e.Text); m != nil {
		b := strings.ReplaceAll(m[1], "\\", "")
		err := json.Unmarshal([]byte(b), &r.SubRegions)
		if err != nil {
			log.Error().Err(err).Msg("failed to unmarshal subregions")
			return
		}
	}
}

func (r *RegionScraper) ToSource() ([]byte, error) {
	sort.SliceStable(r.Regions, func(i, j int) bool {
		return r.Regions[i].Name < r.Regions[j].Name
	})
	regions := make([]Region, 0)
	for _, region := range r.Regions {
		id := region.ID
		if subs, ok := r.SubRegions[id]; ok {
			for key, value := range subs {
				r := Region{ID: key, Name: value}
				region.SubRegions = append(region.SubRegions, r)
			}
		}
		sort.SliceStable(region.SubRegions, func(i, j int) bool {
			return region.SubRegions[i].Name < region.SubRegions[j].Name
		})
		regions = append(regions, region)
	}

	tmpl, err := template.New("genregions").Parse(q)
	if err != nil {
		log.Error().Err(err).Msg("parsing template")
		return nil, err
	}

	w := new(bytes.Buffer)
	err = tmpl.Execute(w, regions)
	if err != nil {
		log.Error().Err(err).Msg("executing template")
		return nil, err
	}
	return format.Source(w.Bytes())
}

func run() error {
	collector := colly.NewCollector(
		colly.AllowedDomains("wta.org", "www.wta.org"))

	if local {
		// read from static html to avoid hitting WTA
		collector.WithTransport(&httpwares.TestDataTransport{
			Status:      http.StatusOK,
			Filename:    "wta_regions.html",
			ContentType: "text/html; charset=utf-8",
		})
	}

	log.Info().Bool("local mode", local).Msg("genregions")

	r := &RegionScraper{}
	collector.OnHTML("script", r.SubRegion)
	collector.OnHTML("select[id=super-region]", r.SuperRegion)

	defer func(start time.Time) {
		log.Info().
			Str("url", baseURL).
			Str("op", "regions").
			Dur("elapsed", time.Since(start)).
			Msg("genregions")
	}(time.Now())

	err := collector.Visit(baseURL)
	if err != nil {
		return err
	}

	var src []byte
	if src, err = r.ToSource(); err == nil {
		if err = ioutil.WriteFile("regions_regions.go", src, 0644); err != nil {
			return err
		}
		return nil
	}
	return err
}

func main() {
	if err := run(); err != nil {
		log.Error().Err(err).Bool("success", false).Msg("genregions")
		os.Exit(1)
	}
	log.Info().Bool("success", true).Msg("genregions")
	os.Exit(0)
}
